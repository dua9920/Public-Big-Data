source('C:/01.Project/01.분석참조모델/Rscript/새올/00. Load R Sources.R', encoding = "UTF-8")
source('C:/01.Project/01.분석참조모델/Rscript/새올/00. Load R Sources.R', encoding = "UTF-8")
source('C:/01.Project/01.분석참조모델/Rscript/새올/00. Load R Sources.R', encoding = "UTF-8")
source('C:/01.Project/01.분석참조모델/Rscript/새올/00. Load R Sources.R', encoding = "UTF-8")
age <- 20
class(age)
# 범주형 데이터 저장
sido <- factor("서울")
sido
path()
sido <- factor("서울", c("서울", "부산", "제주"))
sido
class(sido)
levels(sido) # 전체 범주 확
a <- NULL
jumsu <- c(NA, 90, 100)
a
jumsu
sido <- factor("서울")
sido
levels(sido)
sido2 <- factor("서울", c("부산", "제주"))
sido2
class(sido2)
levels(sido2)
sido <- factor("서울")
sido
levels(sido)
0/0
a <- inf
a
age <- c(11, 12, 13, 14)
age
class(age)
length(age)
age[3]
age[1]
age[1] <- 10
age
age[5] <-15
age
code <- c(1, 2, "30")
code # 모두 다 문자로 변경된다.
data <- c(1:10)
data
data1 <- seq(1, 10)
data1
data2 <- seq(1, 10, by=2)
data2
data3 <- rep(1, times=3)
data3
data4 <- rep(1:3, each=3)
data4
data <- seq(1:10)
data
data <- seq(1,10)
data
data <- rep(1,10,times=2)
data
data <- rep(1:3, each=2)
data
data <- sep(1, 10,  by=2)
data
data <- seq(1, 10,  by=2)
data
var1 <- c(1, 2, 3, 4, 5)
var1
x1 <- matrix(var1, nrow=2, ncol=4)
x1
var1 <- seq(1:6)
var1
x2 <- matrix(var1, nrow=2)
x2
x2[1]
x2[1,]
x2[1]
x2[2]
x2[4]
x2[3]
x2[1][2]
x2[1][1]
x2[1][3]
x2[1][1]
x2
x2[1,2]
x2[1][1]
x2[2][1]
x2[2][2]
x2[2][3]
x2[1][3]
x2[1, 3]
x2[, 1]
x1
x1 <- rbind(x1, c(10, 10, 10))
x1
x1 <- cbind(x1, c(20, 20))
x1
no <- seq(10, 70, 10)
age <- c(18, 15, 13, 12, 10, 9, 7)
gender <- c("M", "M", "M", "M", 'M', "F", "M")
students
students <- data.frame(no, age, gender)
students
students['no']
students['age']
students['age'][0]
students['age'][1]
students['age'][2]
students[1]['age']
colnames(students)
rownames(students)
colnames(students) <- c('no', '나이', '성별')
colnames(students)
students
students <- cbind('A', 'B', 'C', 'D', 'E', 'F', 'G')
students
no <- seq(10, 70, 10)
age <- c(18, 15, 13, 12, 10, 9, 7)
gender <- c("M", "M", "M", "M", 'M', "F", "M")
students
students <- data.frame(no, age, gender)
students
students <- cbind(students, c('A', 'B', 'C', 'D', 'E', 'F', 'G'))
students
students[4]
students[4] <- '영'
students
no <- seq(10, 70, 10)
age <- c(18, 15, 13, 12, 10, 9, 7)
gender <- c("M", "M", "M", "M", 'M', "F", "M")
students <- data.frame(no, age, gender)
students
students <- cbind(students, c('A', 'B', 'C', 'D', 'E', 'F', 'G'))
colnames(students[4]) <- '영어'
students
colnames(students) <- c('no', '나이', '성별', '영어')
students
students$no
students$영
students$영
students$영어
students[, 'no']
students[1, 'no']
students[10]
students[10, ]
rownames(students)
students['1']
students['1', ]
students[, 'name'] <- c("이용", '준희', '이훈', '서희', '승희', '하정', '하준')
students
colnames(students)
tail(students)
head(students)
tail(students, 3)
head(students, 3)
var1 <- seq(1, 12)
var1
arr1 <- array(var1, dim=c(2,2,3))
arr1
v_data <- c("02-1111-2222", '01022223333') # 벡터
m_data <- matrix(c(21:16), nrow=2) # 행렬
a_data <- array(c(31:36), dim=c(2,2,2)) # 배열
d_data <- data.frame(address=c('서울', '부산'), name=c('Lee', 'Kim'), stringsAsFactors=F) # 데이터프레임
# stringsAsFactor는 string 값으로 넣어지는? 그런 것인듯.
v_data
m_data
a_data
d_data
list_data = list(name='홍길동', tel=v_data, score1=m_data, score2=a_data, friends=d_data)
list_data
list_data$name
list_data$tel
list_data[3]
2 + 3
2 * 3
2 ^ 3
5 %% 2
5 %/% 2
n <- 20
n %in% c(10, 20, 30)
n <- 10
n <- 11
n %in% c(10, 20, 11)
score <- c(10, 20)
score + 2
score # 벡터 자체는 변경되지 않았음. 할당하지 않았기 때문.
score <- score + 2
score # 할당돼서 벡터가 변경됨.
score1 <- c(100, 200)
score2 <- c(90, 91)
sum_score <- score1 + score2
sum_score
0
score1 <- seq(100, 400, 100)
score2 <- c(90, 91)
score1
score1 + score2 # 100+90, 200+91, 300+90, 400+91
score1 <- seq(100, 500, 100)
score1
score1 + score2 # 배수 관계가 아니면 오류가 남.
m1 <- matrix(seq(1:9), nrow=3)
m2 <- matrix(rep(2, 9), nrow=3)
m1
m2
m1 + m2
m1 - m2
m1 * m2
m1 ^ m2
m1 & m2
score <- 85
ifelse(score >= 91, 'A', 'FALSE 수행')
score <- 70
ifelse(score>30, 'A', '하이루')
for i in (1:3){
print(i)
for (i in (1:3)){
print(i)
}
a <- function() {
print('하이루')
}
a()
a <- function(num1, num2){
print(num1, num2)
}
a(10, 20)
a <- function(num1, num2){
print(paste(num1,' ', num2))
}
a(10, 20)
a <- function(num1, num2){
print(paste(num1,'', num2))
}
a(10, 20)
head(Orange)
str(Orange)
summary(Orange)
nhis <- read.csv('./file/서울교통공사_승차순위_20210531.csv', encoding='CP949')
head(nhis)
getwd()
setwd('G:')
getwd()
getwd()
setwd('G:/Repository/PublicBigData/')
setwd('G:/Repository/PublicBigData/R/')
nhis <- read.csv('../file/서울교통공사_승차순위_20210531.csv', encoding='CP949')
head(nhis)
nhis <- read.csv('/../file/서울교통공사_승차순위_20210531.csv', encoding='CP949')
nhis <- read.csv('../file/서울교통공사_승차순위_20210531.csv', encoding='CP949')
nhis2 <- read.csv('./csv/서울교통공사_승차순위_20210531.csv', fileEncoding='UTF-8')
nhis2 <- read.csv('../file/서울교통공사_승차순위_20210531.csv', fileEncoding='UTF-8')
nhis2 <- read.csv('./file/서울교통공사_승차순위_20210531.csv', fileEncoding='UTF-8')
nhis <- read.csv('../file/서울교통공사_승차순위_20210531.csv', encoding='CP949')
nhis <- read.csv('./file/서울교통공사_승차순위_20210531.csv', encoding='CP949')
head(nhis)
sample <- read.csv('./file/서울교통공사_승차순위_20210531.csv', header=F, fileEncoding='euc-kr')
sample
head(sample)
head(nhis)
sample <- read.csv('./file/서울교통공사_승차순위_20210531.csv', header=F, fileEncoding='euc-kr', stringsAsFactor=TRUE)
head(sample)
nhis_bigdata = fread('./file/서울교통공사_승차순위_20210531.csv')
head(nhis_bigdata)
str(nhis_bigdata)
install.packages('data.table')
nhis_bigdata = fread('./file/서울교통공사_승차순위_20210531.csv')
library(data.table)
nhis_bigdata = fread('./file/서울교통공사_승차순위_20210531.csv')
head(nhis_bigdata)
str(nhis_bigdata)
Orange[1, ]
Orange[1:4, ]
Orange[c(1, 3), ]
Orange[-c(1:29), ]
Orange[Orange$age == 118]
Orange[Orange$age == 118, ]
Orange[Orange$age %in% c(118, 484), ]
students$no
students$영어
students[1, 'no']
students['1', ]
Orange[Orange$age == 118, ]
Orange[1]
Orange[1, Orange$age]
Orange[1, Orange$age == 118]
Orange[1, 1]
Orange[1, 3]
Orange[1, 2]
Orange[1, ]
Orange[, 'age']
Orange[1, c('Tree')]
Orange[1, c('Tree', 'circumference')]
OrangeT1 <- Orange[Orange$circumference < 50, ]
OrangeT1
OrangeT1[order(OrangeT1$circumference), ]
OrangeT1[order(-OrangeT1$circumference), ]
aggregate(circumference~Tree, Orange, mean)
stu1 <- data.frame(no = c(1:3), mid=c(100, 90, 80))
stu2 <- data.frame(no=c(1:3), fin=c(100, 90, 80))
stu3 <- data.frame(no=c(1, 4, 5), quiz=c(99, 88, 77))
stu4 <- data.frame(no=c(4:6), mid=c(99,88,77))
stu1
stu2
stu3
stu4
# merge()
# 동일 컬럼명의 동일 데이터 행 끼리 병합한다.
# 만약 all 옵션을 주면 안맞는 값은 NA 값이 들어간다.
merge(stu1, stu2)
merge(stu1, stu3)
merge(stu1, stu3, all=T)
rbind(stu1, stu4)
cbind(stu1, stu2)
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
# 평균값 : mean()
mean(A_salary)
mean(B_salary)
# 결측값이 있는 경우
# 결측값을 제거하고 평균을 구할때는 na.rm = T 인자를 사용
A_salary2 <- c(NA, 25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
A_salary2
mean(A_salary2, na.rm = T)
# 중앙값 : median()
median(A_salary)
median(A_salary2, na.rm=T)
median(B_salary)
# 절사평균
# 데이터 요약을 통해서 데이터의 특징, 데이터 간 차이를 파악 가능
# 대부분의 값이 어디쯤 위치하는지 추정
mean(A_salary, trim=0.1) # 양끝 10%씩 값을 제외하고 평균을 구함
mean(B_salary, trim=0.1)
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
# 분산도 : 관측된 데이터가 흩어져 있는 정도
# 범위 : 관측된 값들 중에서의 최대값과 최소값의 차이로 분산도를 측정하는 간단한 방법
# range() 함수
range(A_salary)
range(B_salary)
# 최대값, 최소값
# min, max
min(A_salary)
max(A_salary)
min(B_salary)
max(B_salary)
# 2.2 분산과 표준편차
var(A_salary)
var(B_salary) # 연봉의 분산이 큼을 알 수 있음.
sd(A_salary)
sd(B_salary) # 연봉의 편차가 큼을 알 수 있음.
range(A_salary)
range(B_salary)
# 최대값, 최소값
# min, max
min(A_salary)
max(A_salary)
min(B_salary)
max(B_salary)
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
# 90% 백분위수
quantile(A_salary, 0.9)
quantile(B_salary, 0.9)
boxplot(A_salary, B_salary, names=c("A회사 연봉", "B회사 연봉"))
hist(A_salary, xlab="A사 salary", ylab="인원수", breaks=5)
quantile(A_salary)
hist(A_salary, xlab="A사 salary", ylab="인원수", breaks=5)
hist(A_salary, xlab="A사 salary", ylab="인원수", breaks=6)
hist(A_salary, xlab="A사 salary", ylab="인원수", breaks=5)
cut_value <- cut(A_salary, breaks = 5)
freq <- table(cut_value)
cut_value
freq
cut_value <- cut(A_salary, breaks = 5)
freq <- table(cut_value)
cut_value
freq
# 범주형 데이터 : table() 함수로 도수분포표 생성
A_gender <- as.factor(c('남', '남', '남', '남', '남', '남', '남', '남', '남', '여', '여', '여', '여', '여'))
B_gender <- as.factor(c('남', '남', '여', '여', '여', '여', '남', '남', '남', '여', '여', '여', '여', '여'))
A <- data.frame(gender <- A_gender, salary <- A_salary)
B <- data.frame(gender <- B_gender, salary <- B_salary)
freqA <- table(A$gender)
freqA
freqB <- table(B$gender)
freqB
prop.table(freqA)
prop.table(freqB)
barplot(freqA, names= c('남', '여'), col = c('skyblue', 'pink'), ylim=c(0, 10))
title(main='A사')
barplot(freqB, names= c('남', '여'), col = c('skyblue', 'pink'), ylim=c(0, 10))
title(main='B사')
# 3.6 파이 그래프
# pie() : 분포의 시각화를 위해 사용, 범주가 몇개 되지 않고, 차이가 확연한 경우
pie(x = freqA, col=c('skyblue', 'pink'), main='A사')
pie(x = freqB, col=c('skyblue', 'pink'), main='B사')
plot(A$hireyears, A$salary, xlab="근무년수", ylab="연봉(백만원단위")
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
A_hireyears <-c(1, 1, 5, 6, 3, 3, 4, 7, 4, 7, 4, 10, 3, 3)
A <- data.frame(salary <- A_salary, hireyears <- A_hireyears)
plot(A$hireyears, A$salary, xlab="근무년수", ylab="연봉(백만원단위")
# pairs() 함수 : 여러 가지 변수의 산점도 그래프를 한눈에 볼 수 있도록 작성
pairs(iris[, 1:4], main="iris data")
cor(A$hireyears, A$salary) # 1에 무척 가까우므로 양의 상관관계를 가진다.
cor(iris[, 1:4])
heatmap((cor(iris[, 1:4])))
data <- c(5, 6, 7, 5, 5, 9, 10, 3, 3, 3.5, 8, 8, 7, 2, 3, 3.5, 6, 6, 6, 6)
# 모평균이 T보다 적은지 단측 검정
# p-value기 0.05보다 작으므로 귀무가설 기각, 대립가설 채택
# 대립가설은
# 'A병원에서 치료를 받은 성인여성 감기환자 모집단의 평균 치유기간은 7일보다 짧다'이다.
t.test(data, mu = 7, altenative='less')
data <- c(5, 6, 7, 5, 5, 9, 10, 3, 3, 3.5, 8, 8, 7, 2, 3, 3.5, 6, 6, 6, 6)
t.test(data, mu=7, alternative='less')
before <- c(68.12, 56.94, 57.36, 54.64, 64.33, 48.49, 68.72, 56.19, 61.6, 58.75, 67.31, 49.7, 58.39, 58.08, 65.67, 54.5, 59.14, 55.61, 60.21, 62.91)
# 다이어트약 복용 5개월 후 몸무게
after <- c(65.90, 54.79, 57.82, 54.64, 64.84, 47.34, 67.87, 54.58, 60.65, 58.79, 65.71, 48.81, 57.0, 56.52, 64.13, 53.94,57.22, 55.32, 61.61, 63.22)
t.test(before, after, paired=TRUE, var.equal=TRUE, alternative="greater")
Seoul <- c(43.12, 40.94, 42.36, 50.64, 50, 43.49, 43.72, 40.19, 46.6, 43.75, 42.31, 44.7, 43.39, 33.08, 40.67, 49.5, 34.14, 40.61, 35.21, 37.91)
# 부산 지역의 남학생의 몸무게 데이터
Busan <- c(41.74, 42.35, 40.62, 28.64, 49.64, 40.94, 43.25, 40.3, 56.03, 43.77, 51.3, 44.26, 42.6, 32.19, 39.72, 49.2, 33.03, 40.45, 36.03, 38.1)
data(Orange)
head(Orange)
model <- lm(circumference ~ age, Orange)
model
coef(model)
r <- residuals(model)
r # 전체 확인
r[0:4] # 1행만 확인
deviance(model)
predict.lm(model, newdata = data.frame(age=100))
summary(model)
n <- head(Nile)
n
# 1차 차분
n.diff1 <- diff(n, differences = 1)
n.diff1
# 2차 차분
n.diff2 <- diff(n, differences = 2)
n.diff2
plot(Nile)
# 5-2 자기회귀 누적이동평균 모델
# forecatst 패키지의 auto.arima() 함수를 이용하여 적절한 p, d, q인자 결정
# 1) 먼저 forecast 패키지를 설치하고 불러온다.
install.packages("forecast")
library(forecast)
auto.arima(Nile)
library(forecast)
ldeaths.decomp <- decompose(ldeaths)
plot(ldeaths.decomp)
fit <- princomp(iris[, 1:4], cor=TRUE)
fit # 상관행렬을 이용한 주성분분석 수행
